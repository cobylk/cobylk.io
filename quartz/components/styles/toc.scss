@use "../../styles/variables.scss" as *;

.toc {
  display: flex;
  flex-direction: column;
  overflow-y: hidden;
  min-height: 4rem;
  flex: 0 1 auto;
  position: relative;

  h3 {
    font-size: 1rem;
    margin: 0 0 1rem 0;
    color: var(--purple-primary);
  }
}

@media all and not ($mobile) {
  .toc-header {
    display: flex;
  }
}

button.toc-header {
  background-color: transparent;
  border: none;
  text-align: left;
  cursor: pointer;
  padding: 0;
  color: var(--dark);
  display: flex;
  align-items: center;

  & h3 {
    font-size: 1rem;
    display: inline-block;
    margin: 0;
  }

  & .fold {
    margin-left: 0.5rem;
    transition: transform 0.3s ease;
    opacity: 0.8;
  }

  &.collapsed .fold {
    transform: rotateZ(-90deg);
  }
}

ul.toc-content.overflow {
  list-style: none;
  position: relative;
  margin: 0;
  padding: 0;

  li {
    position: relative;
    padding-left: 1.5rem;
    margin-bottom: 0.05rem;

    &::before {
      content: "";
      position: absolute;
      left: 0.425rem;
      top: 0;
      height: calc(100% + 0.05rem);
      width: 1.5px;
      background-color: rgba(var(--purple-primary-rgb), 0.3);
      z-index: 1;
    }

    &::after {
      content: "";
      position: absolute;
      left: 0.25rem;
      top: 50%;
      height: 0.45rem;
      width: 0.45rem;
      border-radius: 50%;
      background-color: var(--purple-primary);
      z-index: 2;
      transform: translateY(-50%);
      transition: background-color 0.2s ease, transform 0.2s ease;
    }

    &:last-child::before {
      height: 100%;
    }

    &:hover::after {
      background-color: var(--purple-secondary);
      transform: translateY(-50%) scale(1.5);
    }

    & > a {
      color: var(--dark);
      opacity: 0.35;
      transition: 0.5s ease opacity, 0.3s ease color;
      display: block;
      padding: 0.2rem 0;
      position: relative;
      z-index: 3;

      &:hover {
        color: var(--purple-secondary);
        opacity: 0.75;
      }

      &.in-view {
        opacity: 0.75;
        color: var(--purple-primary);
      }
    }
  }

  // Suppress artifacts from overflow sentinel and empties
  li.overflow-end {
    height: 0;
    margin: 0;
    padding: 0;
  }

  div:empty::before,
  div:empty::after,
  ul:empty::before,
  ul:empty::after {
    display: none !important;
  }

  li:not(:has(> a))::after,
  li:not(:has(> a))::before {
    display: none !important;
  }

  li:last-child::before {
    height: 100% !important;
  }

  // Ensure the last real item before the sentinel extends fully
  li:has(+ .overflow-end)::before {
    height: 100% !important;
  }

  @for $i from 0 through 6 {
    & .depth-#{$i} {
      padding-left: calc(1.5rem + 1rem * #{$i});
    }
  }
}
